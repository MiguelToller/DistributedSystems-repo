
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

public class Servidor extends javax.swing.JFrame {
    
    public Servidor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblApelido = new javax.swing.JLabel();
        lblPorta = new javax.swing.JLabel();
        txtApelido = new javax.swing.JTextField();
        txtPorta = new javax.swing.JTextField();
        btnIniciar = new javax.swing.JButton();
        lblMensagem = new javax.swing.JLabel();
        txtMensagem = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaMensagem = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblApelido.setText("Apelido");

        lblPorta.setText("Porta");

        btnIniciar.setText("Iniciar");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        lblMensagem.setText("Mensagem");

        txtMensagem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMensagemKeyPressed(evt);
            }
        });

        txaMensagem.setEditable(false);
        txaMensagem.setColumns(20);
        txaMensagem.setRows(5);
        jScrollPane1.setViewportView(txaMensagem);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(btnIniciar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblApelido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtApelido)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblPorta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPorta, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblMensagem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPorta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPorta))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtApelido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblApelido)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnIniciar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMensagem)
                    .addComponent(txtMensagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        if (txtApelido.getText().equals("") || txtPorta.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Campos incompletos para conexão");
        } else {
            try {
                socketServidor = new ServerSocket(Integer.parseInt(txtPorta.getText()));
                
                // Cria a janela de "Aguardando conexao"
                JDialog dialog = new JDialog(this, "Conectando...", true);
                javax.swing.JLabel lbl = new javax.swing.JLabel("Aguardando conexão do cliente...", javax.swing.SwingConstants.CENTER);
                dialog.add(lbl);
                dialog.setSize(300, 100);
                dialog.setLocationRelativeTo(this);
                
                // Thread para aceitar conexao e fechar o dialogo depois
                new Thread(() -> {
                    try {
                        socketCliente = socketServidor.accept();
                        dialog.dispose();
                    } catch (IOException ex) {
                        System.out.println("Erro ao aceitar conexão: " + ex.getMessage());
                    }
                }).start();
                
                dialog.setVisible(true);             
                
                new Thread() {
                    public void run() {
                        String fraseDoCliente;
                        
                        try {
                            saida = new ObjectOutputStream(socketCliente.getOutputStream()); //INSTANCIAR PRIMEIRO O ESCRITOR
                            entrada = new ObjectInputStream(socketCliente.getInputStream());
                            while ((fraseDoCliente = (String) entrada.readObject()) != null) {
                                txaMensagem.setText(fraseDoCliente + "\n");
                            }
                        } catch (IOException ex) {
                            System.out.println("Erro: " + ex.getMessage());
                        } catch (ClassNotFoundException ex) {
                            System.out.println("Erro: " + ex.getMessage());
                        }
                    }
                }.start(); 
            } catch (IOException ex) {
                System.getLogger(Servidor.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
            }
        }
    }//GEN-LAST:event_btnIniciarActionPerformed

    private void txtMensagemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMensagemKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String fraseDoServidor;
            
            fraseDoServidor = txtMensagem.getText();
            try {
                saida.flush();
                saida.writeObject((txtApelido.getText() + ": " + fraseDoServidor));
                txtMensagem.setText("");
            } catch (IOException ex) {
                System.out.println("Erro:" + ex.getMessage());
            }            
        }
    }//GEN-LAST:event_txtMensagemKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Servidor().setVisible(true));
    }
    
    static ServerSocket socketServidor;
    static Socket socketCliente;
    static ObjectOutputStream saida;
    static ObjectInputStream entrada;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIniciar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblApelido;
    private javax.swing.JLabel lblMensagem;
    private javax.swing.JLabel lblPorta;
    private javax.swing.JTextArea txaMensagem;
    private javax.swing.JTextField txtApelido;
    private javax.swing.JTextField txtMensagem;
    private javax.swing.JTextField txtPorta;
    // End of variables declaration//GEN-END:variables
}
